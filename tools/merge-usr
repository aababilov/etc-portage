#!/usr/bin/python2

"""
The script performs /usr merge for Gentoo
(http://www.freedesktop.org/wiki/Software/systemd/TheCaseForTheUsrMerge/).

Run it as root to merge the current system. File collisions will be resolved
automatically, files moved, and symlinks established. If non-trivial collision are
detected, no merge will be performed.

To make the system updatable, put this script to /etc/portage/tools/merge-usr,
make it executable, and add to /etc/portage/bashrc:

post_src_install() {
	/etc/portage/tools/merge-usr "$D"
}
"""

import argparse
import os
import subprocess
import sys


dirs = ["bin", "sbin", "lib", "lib32", "lib64"]
image_dir = ""


def full_name(fname):
    if fname[0] == "/":
        fname = fname[1:]
    return "%s/%s" % (image_dir, fname)


def normlink(link):
    ref = os.readlink(full_name(link))
    if ref.startswith("."):
        ref = os.path.normpath(os.path.join(os.path.dirname(link), ref))
    return ref


def handle_links(link, target):
    if os.path.islink(full_name(link)):
        ref = normlink(link)
        if "/" not in ref:
            print "%s is a local symlink to %s" % (link, ref)
            return link
        if ref == target:
            print "%s is a symlink to %s" % (link, target)
            return target
        if os.path.islink(full_name(target)):
            target_ref = normlink(target)
            if ref == target_ref:
                print "%s and %s are links to %s" % (link, target, ref)
                return target
    return None


def handle_collision(root_name, usr_name):
    if os.path.basename(root_name) == ".keep":
        return usr_name
    ret = (handle_links(root_name, usr_name) or
           handle_links(usr_name, root_name))
    if ret:
        return ret
    return None


def do_merge(file_keep, file_remove):
    for f in file_remove:
        os.remove(full_name(f))
    for dir_name in dirs:
        full_root_dir_name = full_name(dir_name)
        if os.path.islink(full_root_dir_name):
            continue
        if not os.path.exists(full_root_dir_name):
            continue
        full_usr_dir_name = full_name("/usr/%s" % dir_name)
        if not os.path.exists(full_usr_dir_name):
            os.makedirs(full_usr_dir_name)
        for fname in sorted(os.listdir(full_root_dir_name)):
            root_name = "/%s/%s" % (dir_name, fname)
            os.rename(full_name(root_name), full_name("/usr%s" % root_name))
        os.rmdir(full_root_dir_name)
        if not image_dir:
            os.symlink("usr/%s" % dir_name, full_root_dir_name)


def main():
    global image_dir

    parser = argparse.ArgumentParser()
    parser.add_argument("image_dir", default="/", nargs="?",
                        help="Image directory")
    parser.add_argument("--dry-run", "-d", default=False, action="store_true",
                        help="Do not move anything")
    args = parser.parse_args()
    image_dir = os.path.abspath(args.image_dir)
    if image_dir[-1] == "/":
        image_dir = image_dir[:-1]

    file_conflicts = []
    file_keep = []
    file_remove = []
    root_filenames = []

    for dir_name in dirs:
        full_dir_name = full_name(dir_name)
        if not os.path.exists(full_dir_name):
            print "Skipping missing %s" % full_dir_name
            continue
        if os.path.islink(full_dir_name):
            print "Skipping %s symlink" % full_dir_name
            continue
        print "Processing %s" % full_dir_name
        for fname in sorted(os.listdir(full_dir_name)):
            root_name = "/%s/%s" % (dir_name, fname)
            root_filenames.append(root_name)
            usr_name = "/usr%s" % root_name
            if os.path.lexists(full_name(usr_name)):
                preferred = handle_collision(root_name, usr_name)
                if not preferred:
                    file_conflicts.append(root_name)
                else:
                    file_keep.append(preferred)
                    file_remove.append(usr_name
                                       if preferred == root_name
                                       else root_name)

    if file_conflicts:
        print "Cannot merge /usr because of conflicts:"
        print "\n\t".join(file_conflicts)
        sys.exit(2)
    else:
        if file_keep:
            print "These files will be kept:"
            print "\t", "\n\t".join(file_keep)
        if file_remove:
            print "These files will be removed:"
            print "\t", "\n\t".join(file_remove)
        if not image_dir and root_filenames:
            print "These packages own files in /:"
            packages = sorted(list(set(subprocess.check_output(
                ["qfile", "-qC", "--"] + root_filenames).splitlines())))
            print "\t", "\n\t".join(packages)
        if not args.dry_run:
            do_merge(file_keep, file_remove)


if __name__ == "__main__":
    main()
